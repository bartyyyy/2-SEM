; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	d:\education\raboti\labi\kpo_2sem\lab1\lab1-1\lab1\release\lab1.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_03EEFOAFAG@RUS@				; `string'
PUBLIC	??_C@_0CB@LNGPMBKI@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0CI@ENAMNAOI@?D?$OA?r?$OA?5?b?b?e?d?e?m?$OA?5?m?e?j?n?p?p?e?j?r?m?n?5?o?n?b?r?n?p@ ; `string'
PUBLIC	??_C@_0CM@EEMCNDJE@?B?b?e?d?h?r?e?5?b?$OA?x?s?5?d?$OA?r?s?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n@ ; `string'
PUBLIC	??_C@_0CC@CDFMLCPB@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@ ; `string'
PUBLIC	??_C@_0BO@EDKJHNJP@?D?e?m?$PM?5?d?n?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ ; `string'
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp____std_terminate:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp__setlocale:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__imp____CxxFrameHandler3:PROC
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_C@_0BO@EDKJHNJP@?D?e?m?$PM?5?d?n?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
CONST	SEGMENT
??_C@_0BO@EDKJHNJP@?D?e?m?$PM?5?d?n?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ DB 0c4H
	DB	0e5H, 0edH, 0fcH, ' ', 0e4H, 0eeH, ' ', 0e2H, 0e0H, 0f8H, 0e5H
	DB	0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H
	DB	0e5H, 0edH, 0e8H, 0ffH, ': ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CDFMLCPB@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@
CONST	SEGMENT
??_C@_0CC@CDFMLCPB@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH
	DB	0edH, 0eeH, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EEMCNDJE@?B?b?e?d?h?r?e?5?b?$OA?x?s?5?d?$OA?r?s?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n@
CONST	SEGMENT
??_C@_0CM@EEMCNDJE@?B?b?e?d?h?r?e?5?b?$OA?x?s?5?d?$OA?r?s?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e2H, 0e0H, 0f8H, 0f3H
	DB	' ', 0e4H, 0e0H, 0f2H, 0f3H, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H
	DB	0f2H, 0e5H, ' ', 0c4H, 0c4H, ' ', 0ccH, 0ccH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ENAMNAOI@?D?$OA?r?$OA?5?b?b?e?d?e?m?$OA?5?m?e?j?n?p?p?e?j?r?m?n?5?o?n?b?r?n?p@
CONST	SEGMENT
??_C@_0CI@ENAMNAOI@?D?$OA?r?$OA?5?b?b?e?d?e?m?$OA?5?m?e?j?n?p?p?e?j?r?m?n?5?o?n?b?r?n?p@ DB 0c4H
	DB	0e0H, 0f2H, 0e0H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0e0H
	DB	' ', 0edH, 0e5H, 0eaH, 0eeH, 0f0H, 0f0H, 0e5H, 0eaH, 0f2H, 0edH
	DB	0eeH, ' ', 0efH, 0eeH, 0e2H, 0f2H, 0eeH, 0f0H, 0e8H, 0f2H, 0e5H
	DB	' ', 0e2H, 0e2H, 0eeH, 0e4H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LNGPMBKI@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CB@LNGPMBKI@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEFOAFAG@RUS@
CONST	SEGMENT
??_C@_03EEFOAFAG@RUS@ DB 'RUS', 00H			; `string'
CONST	ENDS
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	?check@@YA_NHHH@Z				; check
PUBLIC	?dayBeforeBirthday@@YAHHHHHH@Z			; dayBeforeBirthday
PUBLIC	?daySerialNumber@@YAHHHH@Z			; daySerialNumber
PUBLIC	?ifYearLeap@@YA_NH@Z				; ifYearLeap
PUBLIC	_main
PUBLIC	__xmm@0000001e0000001f0000001e0000001f
PUBLIC	__xmm@0000001f0000001e0000001f0000001f
EXTRN	___std_terminate:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __xmm@0000001f0000001e0000001f0000001f
CONST	SEGMENT
__xmm@0000001f0000001e0000001f0000001f DB 01fH, 00H, 00H, 00H, 01fH, 00H, 00H
	DB	00H, 01eH, 00H, 00H, 00H, 01fH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000001e0000001f0000001e0000001f
CONST	SEGMENT
__xmm@0000001e0000001f0000001e0000001f DB 01fH, 00H, 00H, 00H, 01eH, 00H, 00H
	DB	00H, 01fH, 00H, 00H, 00H, 01eH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$19
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$19 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\education\raboti\Labi\KPO_2sem\lab1\lab1-1\lab1\lab1.cpp
;	COMDAT _main
_TEXT	SEGMENT
_iMonth$1$ = -92					; size = 4
_iYear$1$ = -88						; size = 4
_iDay$1$ = -84						; size = 4
_dayBeforeBirthdayNumber$1$ = -80			; size = 4
_serialNumber$1$ = -76					; size = 4
tv458 = -72						; size = 4
_daysInMonth$1 = -68					; size = 52
_daysInMonth$2 = -68					; size = 52
_birthday$ = -16					; size = 8
_date$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 58	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi

; 18   :     setlocale(LC_ALL, "RUS");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_03EEFOAFAG@RUS@
  0001c	6a 00		 push	 0
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00024	83 c4 08	 add	 esp, 8
  00027	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  0002c	0f 1f 40 00	 npad	 4
$LL4@main:

; 19   : 
; 20   :     int date;
; 21   :     int iYear, iMonth, iDay, serialNumber, dayBeforeBirthdayNumber;
; 22   :     BIRTH birthday;
; 23   :     do
; 24   :     {
; 25   :         cout << "Введите дату в формате ДДММГГГГ\n";

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00036	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CB@LNGPMBKI@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  0003b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 26   :         cin >> date;

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00046	8d 44 24 60	 lea	 eax, DWORD PTR _date$[esp+104]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 27   : 
; 28   :         iDay = date / 1000000;

  00051	8b 5c 24 60	 mov	 ebx, DWORD PTR _date$[esp+104]
  00055	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  0005a	f7 eb		 imul	 ebx

; 29   :         iMonth = (date / 10000) % 100;

  0005c	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  00061	c1 fa 12	 sar	 edx, 18			; 00000012H
  00064	8b f2		 mov	 esi, edx
  00066	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00069	03 f2		 add	 esi, edx
  0006b	f7 eb		 imul	 ebx
  0006d	89 74 24 14	 mov	 DWORD PTR _iDay$1$[esp+104], esi
  00071	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00074	8b ca		 mov	 ecx, edx
  00076	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00079	03 ca		 add	 ecx, edx
  0007b	8b c1		 mov	 eax, ecx
  0007d	99		 cdq
  0007e	f7 ff		 idiv	 edi

; 30   :         iYear = date % 10000;

  00080	69 c1 10 27 00
	00		 imul	 eax, ecx, 10000

; 31   : 
; 32   :         if (!check(iDay, iMonth, iYear))

  00086	8b ce		 mov	 ecx, esi
  00088	89 54 24 0c	 mov	 DWORD PTR _iMonth$1$[esp+104], edx
  0008c	2b d8		 sub	 ebx, eax
  0008e	53		 push	 ebx
  0008f	89 5c 24 14	 mov	 DWORD PTR _iYear$1$[esp+108], ebx
  00093	e8 00 00 00 00	 call	 ?check@@YA_NHHH@Z	; check
  00098	83 c4 04	 add	 esp, 4
  0009b	84 c0		 test	 al, al
  0009d	75 31		 jne	 SHORT $LL7@main

; 33   :             cout << "Дата введена некорректно повторите ввод" << endl;

  0009f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000a4	51		 push	 ecx
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000ab	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CI@ENAMNAOI@?D?$OA?r?$OA?5?b?b?e?d?e?m?$OA?5?m?e?j?n?p?p?e?j?r?m?n?5?o?n?b?r?n?p@
  000b0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b5	83 c4 04	 add	 esp, 4
  000b8	8b c8		 mov	 ecx, eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 34   :     } while (!check(iDay, iMonth, iYear));

  000c0	e9 6b ff ff ff	 jmp	 $LL4@main
  000c5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL7@main:

; 35   : 
; 36   :     do
; 37   :     {
; 38   :         cout << "Введите вашу дату рождения в формате ДД ММ\n";

  000d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d6	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CM@EEMCNDJE@?B?b?e?d?h?r?e?5?b?$OA?x?s?5?d?$OA?r?s?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n@
  000db	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 39   :         cin >> birthday.day;

  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000e6	8d 44 24 58	 lea	 eax, DWORD PTR _birthday$[esp+104]
  000ea	50		 push	 eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 40   :         cin >> birthday.mounth;

  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000f7	8d 44 24 5c	 lea	 eax, DWORD PTR _birthday$[esp+108]
  000fb	50		 push	 eax
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 41   : 
; 42   :         if (birthday.mounth > 12 || birthday.mounth < 1 || birthday.day > 31 || birthday.day < 1)

  00102	8b 7c 24 5c	 mov	 edi, DWORD PTR _birthday$[esp+108]
  00106	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00109	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0010c	77 0e		 ja	 SHORT $LN10@main
  0010e	8b 74 24 58	 mov	 esi, DWORD PTR _birthday$[esp+104]
  00112	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00115	7f 05		 jg	 SHORT $LN10@main
  00117	83 fe 01	 cmp	 esi, 1
  0011a	7d 29		 jge	 SHORT $LN5@main
$LN10@main:

; 43   :             cout << "Дата введена некорректно повторите ввод" << endl;

  0011c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00121	51		 push	 ecx
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00128	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CI@ENAMNAOI@?D?$OA?r?$OA?5?b?b?e?d?e?m?$OA?5?m?e?j?n?p?p?e?j?r?m?n?5?o?n?b?r?n?p@
  0012d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00132	83 c4 04	 add	 esp, 4
  00135	8b c8		 mov	 ecx, eax
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0013d	8b 7c 24 5c	 mov	 edi, DWORD PTR _birthday$[esp+108]
  00141	8b 74 24 58	 mov	 esi, DWORD PTR _birthday$[esp+104]
$LN5@main:

; 44   :     } while (birthday.mounth > 12 || birthday.mounth < 1 || birthday.day > 31 || birthday.day < 1);

  00145	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  00148	7f 86		 jg	 SHORT $LL7@main
  0014a	83 ff 01	 cmp	 edi, 1
  0014d	7c 81		 jl	 SHORT $LL7@main
  0014f	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00152	0f 8f 78 ff ff
	ff		 jg	 $LL7@main
  00158	83 fe 01	 cmp	 esi, 1
  0015b	0f 8c 6f ff ff
	ff		 jl	 $LL7@main

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00161	8b 4c 24 10	 mov	 ecx, DWORD PTR _iYear$1$[esp+104]

; 62   :     int serialNumber = 0;

  00165	33 db		 xor	 ebx, ebx

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00167	8b c1		 mov	 eax, ecx

; 62   :     int serialNumber = 0;

  00169	89 5c 24 1c	 mov	 DWORD PTR _serialNumber$1$[esp+104], ebx

; 63   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0016d	89 5c 24 24	 mov	 DWORD PTR _daysInMonth$2[esp+104], ebx
  00171	c7 44 24 28 1f
	00 00 00	 mov	 DWORD PTR _daysInMonth$2[esp+108], 31 ; 0000001fH

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00179	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0017e	79 07		 jns	 SHORT $LN101@main
  00180	48		 dec	 eax
  00181	83 c8 fc	 or	 eax, -4			; fffffffcH
  00184	83 c0 01	 add	 eax, 1
$LN101@main:
  00187	89 44 24 20	 mov	 DWORD PTR tv458[esp+104], eax
  0018b	75 3e		 jne	 SHORT $LN83@main
  0018d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00192	f7 e9		 imul	 ecx
  00194	c1 fa 05	 sar	 edx, 5
  00197	8b c2		 mov	 eax, edx
  00199	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0019c	03 c2		 add	 eax, edx
  0019e	6b c0 64	 imul	 eax, eax, 100
  001a1	2b c8		 sub	 ecx, eax
  001a3	75 1f		 jne	 SHORT $LN84@main
  001a5	8b 4c 24 10	 mov	 ecx, DWORD PTR _iYear$1$[esp+104]
  001a9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001ae	f7 e9		 imul	 ecx
  001b0	c1 fa 07	 sar	 edx, 7
  001b3	8b c2		 mov	 eax, edx
  001b5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b8	03 c2		 add	 eax, edx
  001ba	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  001c0	2b c8		 sub	 ecx, eax
  001c2	75 07		 jne	 SHORT $LN83@main
$LN84@main:
  001c4	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  001c9	eb 05		 jmp	 SHORT $LN23@main
$LN83@main:
  001cb	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN23@main:

; 63   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  001d0	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001e0000001f0000001e0000001f
  001d7	89 44 24 2c	 mov	 DWORD PTR _daysInMonth$2[esp+112], eax

; 64   :     for (int i = iMonth; i >= 1; i--)

  001db	8b 44 24 0c	 mov	 eax, DWORD PTR _iMonth$1$[esp+104]
  001df	c7 44 24 50 1e
	00 00 00	 mov	 DWORD PTR _daysInMonth$2[esp+148], 30 ; 0000001eH
  001e7	c7 44 24 54 1f
	00 00 00	 mov	 DWORD PTR _daysInMonth$2[esp+152], 31 ; 0000001fH
  001ef	0f 11 44 24 30	 movups	 XMMWORD PTR _daysInMonth$2[esp+116], xmm0
  001f4	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001f0000001e0000001f0000001f
  001fb	0f 11 44 24 40	 movups	 XMMWORD PTR _daysInMonth$2[esp+132], xmm0
  00200	83 f8 01	 cmp	 eax, 1
  00203	7c 29		 jl	 SHORT $LN14@main
  00205	8b 7c 24 14	 mov	 edi, DWORD PTR _iDay$1$[esp+104]
  00209	8b f0		 mov	 esi, eax
  0020b	0f 1f 44 00 00	 npad	 5
$LL15@main:

; 65   :     {
; 66   :         if (i == iMonth)
; 67   :             serialNumber += iDay;

  00210	8b cf		 mov	 ecx, edi
  00212	3b c6		 cmp	 eax, esi
  00214	74 04		 je	 SHORT $LN13@main

; 68   :         else
; 69   :             serialNumber += daysInMonth[i];

  00216	8b 4c 84 24	 mov	 ecx, DWORD PTR _daysInMonth$2[esp+eax*4+104]
$LN13@main:

; 64   :     for (int i = iMonth; i >= 1; i--)

  0021a	48		 dec	 eax
  0021b	03 d9		 add	 ebx, ecx
  0021d	83 f8 01	 cmp	 eax, 1
  00220	7d ee		 jge	 SHORT $LL15@main
  00222	8b 74 24 58	 mov	 esi, DWORD PTR _birthday$[esp+104]
  00226	8b 7c 24 5c	 mov	 edi, DWORD PTR _birthday$[esp+108]

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0022a	89 5c 24 1c	 mov	 DWORD PTR _serialNumber$1$[esp+104], ebx
$LN14@main:
  0022e	83 7c 24 20 00	 cmp	 DWORD PTR tv458[esp+104], 0

; 76   :     int dayBeforeBirthdayNumber = 0;

  00233	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _dayBeforeBirthdayNumber$1$[esp+104], 0

; 77   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0023b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _daysInMonth$1[esp+104], 0
  00243	c7 44 24 28 1f
	00 00 00	 mov	 DWORD PTR _daysInMonth$1[esp+108], 31 ; 0000001fH

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0024b	75 40		 jne	 SHORT $LN34@main
  0024d	8b 5c 24 10	 mov	 ebx, DWORD PTR _iYear$1$[esp+104]
  00251	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00256	f7 eb		 imul	 ebx
  00258	c1 fa 05	 sar	 edx, 5
  0025b	8b ca		 mov	 ecx, edx
  0025d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00260	03 ca		 add	 ecx, edx
  00262	8b d3		 mov	 edx, ebx
  00264	6b c9 64	 imul	 ecx, ecx, 100
  00267	2b d1		 sub	 edx, ecx
  00269	75 1b		 jne	 SHORT $LN33@main
  0026b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00270	f7 eb		 imul	 ebx
  00272	c1 fa 07	 sar	 edx, 7
  00275	8b c2		 mov	 eax, edx
  00277	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0027a	03 c2		 add	 eax, edx
  0027c	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00282	2b d8		 sub	 ebx, eax
  00284	75 07		 jne	 SHORT $LN34@main
$LN33@main:
  00286	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  0028b	eb 05		 jmp	 SHORT $LN35@main
$LN34@main:
  0028d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN35@main:

; 77   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00292	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001e0000001f0000001e0000001f

; 78   :     for (int i = iMonth; i != mounth; i = (i % 12) + 1)

  00299	8b 54 24 0c	 mov	 edx, DWORD PTR _iMonth$1$[esp+104]
  0029d	8b da		 mov	 ebx, edx
  0029f	89 44 24 2c	 mov	 DWORD PTR _daysInMonth$1[esp+112], eax
  002a3	c7 44 24 50 1e
	00 00 00	 mov	 DWORD PTR _daysInMonth$1[esp+148], 30 ; 0000001eH
  002ab	c7 44 24 54 1f
	00 00 00	 mov	 DWORD PTR _daysInMonth$1[esp+152], 31 ; 0000001fH
  002b3	0f 11 44 24 30	 movups	 XMMWORD PTR _daysInMonth$1[esp+116], xmm0
  002b8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001f0000001e0000001f0000001f
  002bf	0f 11 44 24 40	 movups	 XMMWORD PTR _daysInMonth$1[esp+132], xmm0
  002c4	3b d7		 cmp	 edx, edi
  002c6	74 48		 je	 SHORT $LN26@main
  002c8	33 f6		 xor	 esi, esi
  002ca	66 0f 1f 44 00
	00		 npad	 6
$LL27@main:

; 79   :     {
; 80   :         if (i == iMonth)

  002d0	8b 44 9c 24	 mov	 eax, DWORD PTR _daysInMonth$1[esp+ebx*4+104]
  002d4	8b c8		 mov	 ecx, eax
  002d6	2b 4c 24 14	 sub	 ecx, DWORD PTR _iDay$1$[esp+104]
  002da	3b da		 cmp	 ebx, edx
  002dc	0f 45 c8	 cmovne	 ecx, eax
  002df	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002e4	f7 eb		 imul	 ebx
  002e6	03 f1		 add	 esi, ecx
  002e8	d1 fa		 sar	 edx, 1
  002ea	8b c2		 mov	 eax, edx
  002ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ef	03 c2		 add	 eax, edx
  002f1	8b 54 24 0c	 mov	 edx, DWORD PTR _iMonth$1$[esp+104]
  002f5	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	c1 e1 02	 shl	 ecx, 2
  00300	2b c1		 sub	 eax, ecx
  00302	03 d8		 add	 ebx, eax
  00304	3b df		 cmp	 ebx, edi
  00306	75 c8		 jne	 SHORT $LL27@main

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00308	89 74 24 18	 mov	 DWORD PTR _dayBeforeBirthdayNumber$1$[esp+104], esi
  0030c	8b 74 24 58	 mov	 esi, DWORD PTR _birthday$[esp+104]
$LN26@main:

; 45   :     //------------------------------------------
; 46   : 
; 47   :     serialNumber = daySerialNumber(iDay, iMonth, iYear);
; 48   :     dayBeforeBirthdayNumber = dayBeforeBirthday(birthday.day, birthday.mounth, iDay, iMonth, iYear);
; 49   : 
; 50   :     cout << "Порядковый номер введенного дня: " << serialNumber << endl;

  00310	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00316	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CC@CDFMLCPB@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@

; 85   :     dayBeforeBirthdayNumber += day;

  0031b	03 74 24 18	 add	 esi, DWORD PTR _dayBeforeBirthdayNumber$1$[esp+104]

; 45   :     //------------------------------------------
; 46   : 
; 47   :     serialNumber = daySerialNumber(iDay, iMonth, iYear);
; 48   :     dayBeforeBirthdayNumber = dayBeforeBirthday(birthday.day, birthday.mounth, iDay, iMonth, iYear);
; 49   : 
; 50   :     cout << "Порядковый номер введенного дня: " << serialNumber << endl;

  0031f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00324	ff 74 24 20	 push	 DWORD PTR _serialNumber$1$[esp+108]
  00328	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0032d	8b c8		 mov	 ecx, eax
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00335	8b c8		 mov	 ecx, eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 51   :     cout << "День до вашего дня рождения: " << dayBeforeBirthdayNumber << endl;

  0033d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00343	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BO@EDKJHNJP@?D?e?m?$PM?5?d?n?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
  00348	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0034d	56		 push	 esi
  0034e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00353	8b c8		 mov	 ecx, eax
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0035b	8b c8		 mov	 ecx, eax
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 52   : }

  00363	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  00367	33 c0		 xor	 eax, eax
  00369	5f		 pop	 edi
  0036a	5e		 pop	 esi
  0036b	5b		 pop	 ebx
  0036c	33 cc		 xor	 ecx, esp
  0036e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00373	8b e5		 mov	 esp, ebp
  00375	5d		 pop	 ebp
  00376	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\education\raboti\Labi\KPO_2sem\lab1\lab1-1\lab1\lab1.cpp
;	COMDAT ?ifYearLeap@@YA_NH@Z
_TEXT	SEGMENT
?ifYearLeap@@YA_NH@Z PROC				; ifYearLeap, COMDAT
; _iYear$ = ecx

; 56   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00003	8b c6		 mov	 eax, esi
  00005	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0000a	79 07		 jns	 SHORT $LN8@ifYearLeap
  0000c	48		 dec	 eax
  0000d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00010	83 c0 01	 add	 eax, 1
$LN8@ifYearLeap:
  00013	75 39		 jne	 SHORT $LN4@ifYearLeap
  00015	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0001a	f7 ee		 imul	 esi
  0001c	c1 fa 05	 sar	 edx, 5
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx
  00026	8b d6		 mov	 edx, esi
  00028	6b c9 64	 imul	 ecx, ecx, 100
  0002b	2b d1		 sub	 edx, ecx
  0002d	75 1b		 jne	 SHORT $LN3@ifYearLeap
  0002f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00034	f7 ee		 imul	 esi
  00036	c1 fa 07	 sar	 edx, 7
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00046	2b f0		 sub	 esi, eax
  00048	75 04		 jne	 SHORT $LN4@ifYearLeap
$LN3@ifYearLeap:
  0004a	b0 01		 mov	 al, 1
  0004c	5e		 pop	 esi

; 58   : }

  0004d	c3		 ret	 0
$LN4@ifYearLeap:

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0004e	32 c0		 xor	 al, al
  00050	5e		 pop	 esi

; 58   : }

  00051	c3		 ret	 0
?ifYearLeap@@YA_NH@Z ENDP				; ifYearLeap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\education\raboti\Labi\KPO_2sem\lab1\lab1-1\lab1\lab1.cpp
;	COMDAT ?daySerialNumber@@YAHHHH@Z
_TEXT	SEGMENT
_daysInMonth$ = -52					; size = 52
_iYear$ = 8						; size = 4
?daySerialNumber@@YAHHHH@Z PROC				; daySerialNumber, COMDAT
; _iDay$ = ecx
; _iMonth$ = edx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 63   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00009	c7 45 d0 1f 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+4], 31 ; 0000001fH

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _iYear$[ebp]
  00013	8b c1		 mov	 eax, ecx

; 61   : {

  00015	56		 push	 esi

; 62   :     int serialNumber = 0;

  00016	33 f6		 xor	 esi, esi

; 63   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00018	89 75 cc	 mov	 DWORD PTR _daysInMonth$[ebp], esi
  0001b	57		 push	 edi
  0001c	8b fa		 mov	 edi, edx

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0001e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00023	79 07		 jns	 SHORT $LN23@daySerialN
  00025	48		 dec	 eax
  00026	83 c8 fc	 or	 eax, -4			; fffffffcH
  00029	83 c0 01	 add	 eax, 1
$LN23@daySerialN:
  0002c	75 40		 jne	 SHORT $LN11@daySerialN
  0002e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00033	f7 e9		 imul	 ecx
  00035	c1 fa 05	 sar	 edx, 5
  00038	8b ca		 mov	 ecx, edx
  0003a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0003d	03 ca		 add	 ecx, edx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _iYear$[ebp]
  00042	6b c9 64	 imul	 ecx, ecx, 100
  00045	2b d1		 sub	 edx, ecx
  00047	75 1e		 jne	 SHORT $LN10@daySerialN
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _iYear$[ebp]
  0004c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 07	 sar	 edx, 7
  00056	8b c2		 mov	 eax, edx
  00058	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005b	03 c2		 add	 eax, edx
  0005d	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00063	2b c8		 sub	 ecx, eax
  00065	75 07		 jne	 SHORT $LN11@daySerialN
$LN10@daySerialN:
  00067	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  0006c	eb 05		 jmp	 SHORT $LN12@daySerialN
$LN11@daySerialN:
  0006e	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN12@daySerialN:

; 63   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00073	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001e0000001f0000001e0000001f
  0007a	89 45 d4	 mov	 DWORD PTR _daysInMonth$[ebp+8], eax

; 64   :     for (int i = iMonth; i >= 1; i--)

  0007d	8b c7		 mov	 eax, edi
  0007f	c7 45 f8 1e 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+44], 30 ; 0000001eH
  00086	c7 45 fc 1f 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+48], 31 ; 0000001fH
  0008d	0f 11 45 d8	 movups	 XMMWORD PTR _daysInMonth$[ebp+12], xmm0
  00091	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001f0000001e0000001f0000001f
  00098	0f 11 45 e8	 movups	 XMMWORD PTR _daysInMonth$[ebp+28], xmm0
  0009c	83 ff 01	 cmp	 edi, 1
  0009f	7c 12		 jl	 SHORT $LN17@daySerialN
$LL4@daySerialN:

; 65   :     {
; 66   :         if (i == iMonth)
; 67   :             serialNumber += iDay;

  000a1	8b cb		 mov	 ecx, ebx
  000a3	3b c7		 cmp	 eax, edi
  000a5	74 04		 je	 SHORT $LN2@daySerialN

; 68   :         else
; 69   :             serialNumber += daysInMonth[i];

  000a7	8b 4c 85 cc	 mov	 ecx, DWORD PTR _daysInMonth$[ebp+eax*4]
$LN2@daySerialN:

; 64   :     for (int i = iMonth; i >= 1; i--)

  000ab	48		 dec	 eax
  000ac	03 f1		 add	 esi, ecx
  000ae	83 f8 01	 cmp	 eax, 1
  000b1	7d ee		 jge	 SHORT $LL4@daySerialN
$LN17@daySerialN:
  000b3	5f		 pop	 edi

; 70   :     }
; 71   :     return serialNumber;
; 72   : }

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?daySerialNumber@@YAHHHH@Z ENDP				; daySerialNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\education\raboti\Labi\KPO_2sem\lab1\lab1-1\lab1\lab1.cpp
;	COMDAT ?dayBeforeBirthday@@YAHHHHHH@Z
_TEXT	SEGMENT
_daysInMonth$ = -60					; size = 52
_day$1$ = -8						; size = 4
_mounth$1$ = -4						; size = 4
_iDay$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iYear$ = 16						; size = 4
?dayBeforeBirthday@@YAHHHHHH@Z PROC			; dayBeforeBirthday, COMDAT
; _day$ = ecx
; _mounth$ = edx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _iMonth$[ebp]
  0000a	56		 push	 esi

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0000b	8b 75 10	 mov	 esi, DWORD PTR _iYear$[ebp]
  0000e	8b c6		 mov	 eax, esi

; 75   : {

  00010	57		 push	 edi

; 76   :     int dayBeforeBirthdayNumber = 0;

  00011	33 ff		 xor	 edi, edi
  00013	89 55 fc	 mov	 DWORD PTR _mounth$1$[ebp], edx
  00016	89 4d f8	 mov	 DWORD PTR _day$1$[ebp], ecx

; 77   :     int daysInMonth[] = { 0, 31, ifYearLeap(iYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00019	89 7d c4	 mov	 DWORD PTR _daysInMonth$[ebp], edi
  0001c	c7 45 c8 1f 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+4], 31 ; 0000001fH

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00023	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00028	79 07		 jns	 SHORT $LN22@dayBeforeB
  0002a	48		 dec	 eax
  0002b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0002e	83 c0 01	 add	 eax, 1
$LN22@dayBeforeB:
  00031	75 3c		 jne	 SHORT $LN11@dayBeforeB
  00033	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00038	f7 ee		 imul	 esi
  0003a	c1 fa 05	 sar	 edx, 5
  0003d	8b ca		 mov	 ecx, edx
  0003f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00042	03 ca		 add	 ecx, edx
  00044	8b d6		 mov	 edx, esi
  00046	6b c9 64	 imul	 ecx, ecx, 100
  00049	2b d1		 sub	 edx, ecx
  0004b	75 1b		 jne	 SHORT $LN10@dayBeforeB
  0004d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00052	f7 ee		 imul	 esi
  00054	c1 fa 07	 sar	 edx, 7
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
  0005e	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00064	2b f0		 sub	 esi, eax
  00066	75 07		 jne	 SHORT $LN11@dayBeforeB
$LN10@dayBeforeB:
  00068	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  0006d	eb 05		 jmp	 SHORT $LN12@dayBeforeB
$LN11@dayBeforeB:
  0006f	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN12@dayBeforeB:

; 78   :     for (int i = iMonth; i != mounth; i = (i % 12) + 1)

  00074	8b f3		 mov	 esi, ebx
  00076	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001e0000001f0000001e0000001f
  0007d	0f 11 45 d0	 movups	 XMMWORD PTR _daysInMonth$[ebp+12], xmm0
  00081	89 45 cc	 mov	 DWORD PTR _daysInMonth$[ebp+8], eax
  00084	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001f0000001e0000001f0000001f
  0008b	0f 11 45 e0	 movups	 XMMWORD PTR _daysInMonth$[ebp+28], xmm0
  0008f	c7 45 f0 1e 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+44], 30 ; 0000001eH
  00096	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _daysInMonth$[ebp+48], 31 ; 0000001fH
  0009d	3b 5d fc	 cmp	 ebx, DWORD PTR _mounth$1$[ebp]
  000a0	74 34		 je	 SHORT $LN17@dayBeforeB
$LL4@dayBeforeB:

; 79   :     {
; 80   :         if (i == iMonth)

  000a2	8b 44 b5 c4	 mov	 eax, DWORD PTR _daysInMonth$[ebp+esi*4]
  000a6	8b c8		 mov	 ecx, eax
  000a8	2b 4d 08	 sub	 ecx, DWORD PTR _iDay$[ebp]
  000ab	3b f3		 cmp	 esi, ebx
  000ad	0f 45 c8	 cmovne	 ecx, eax
  000b0	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000b5	f7 ee		 imul	 esi
  000b7	03 f9		 add	 edi, ecx
  000b9	d1 fa		 sar	 edx, 1
  000bb	8b c2		 mov	 eax, edx
  000bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c0	03 c2		 add	 eax, edx
  000c2	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c5	b8 01 00 00 00	 mov	 eax, 1
  000ca	c1 e1 02	 shl	 ecx, 2
  000cd	2b c1		 sub	 eax, ecx
  000cf	03 f0		 add	 esi, eax
  000d1	3b 75 fc	 cmp	 esi, DWORD PTR _mounth$1$[ebp]
  000d4	75 cc		 jne	 SHORT $LL4@dayBeforeB
$LN17@dayBeforeB:

; 81   :             dayBeforeBirthdayNumber += daysInMonth[i] - iDay;
; 82   :         else
; 83   :             dayBeforeBirthdayNumber += daysInMonth[i];
; 84   :     }
; 85   :     dayBeforeBirthdayNumber += day;
; 86   :     return dayBeforeBirthdayNumber;
; 87   : }

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _day$1$[ebp]
  000d9	03 c7		 add	 eax, edi
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
?dayBeforeBirthday@@YAHHHHHH@Z ENDP			; dayBeforeBirthday
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\education\raboti\Labi\KPO_2sem\lab1\lab1-1\lab1\lab1.cpp
;	COMDAT ?check@@YA_NHHH@Z
_TEXT	SEGMENT
_twelve$ = -48						; size = 48
_year$ = 8						; size = 4
?check@@YA_NHHH@Z PROC					; check, COMDAT
; _day$ = ecx
; _month$ = edx

; 90   : { // Добавлены аргументы в функцию check

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00008	8b 75 08	 mov	 esi, DWORD PTR _year$[ebp]

; 90   : { // Добавлены аргументы в функцию check

  0000b	8b d9		 mov	 ebx, ecx

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  0000d	8b c6		 mov	 eax, esi

; 91   :     int twelve[]{ 31, ifYearLeap(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0000f	c7 45 d0 1f 00
	00 00		 mov	 DWORD PTR _twelve$[ebp], 31 ; 0000001fH
  00016	57		 push	 edi
  00017	8b fa		 mov	 edi, edx

; 57   :     return iYear % 4 == 0 && (iYear % 100 != 0 || iYear % 400 == 0);

  00019	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0001e	79 07		 jns	 SHORT $LN15@check
  00020	48		 dec	 eax
  00021	83 c8 fc	 or	 eax, -4			; fffffffcH
  00024	83 c0 01	 add	 eax, 1
$LN15@check:
  00027	75 3c		 jne	 SHORT $LN8@check
  00029	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0002e	f7 ee		 imul	 esi
  00030	c1 fa 05	 sar	 edx, 5
  00033	8b ca		 mov	 ecx, edx
  00035	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00038	03 ca		 add	 ecx, edx
  0003a	8b d6		 mov	 edx, esi
  0003c	6b c9 64	 imul	 ecx, ecx, 100
  0003f	2b d1		 sub	 edx, ecx
  00041	75 1b		 jne	 SHORT $LN7@check
  00043	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00048	f7 ee		 imul	 esi
  0004a	c1 fa 07	 sar	 edx, 7
  0004d	8b c2		 mov	 eax, edx
  0004f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00052	03 c2		 add	 eax, edx
  00054	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  0005a	2b f0		 sub	 esi, eax
  0005c	75 07		 jne	 SHORT $LN8@check
$LN7@check:
  0005e	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  00063	eb 05		 jmp	 SHORT $LN9@check
$LN8@check:
  00065	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN9@check:

; 91   :     int twelve[]{ 31, ifYearLeap(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0006a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001e0000001f0000001e0000001f
  00071	0f 11 45 d8	 movups	 XMMWORD PTR _twelve$[ebp+8], xmm0
  00075	89 45 d4	 mov	 DWORD PTR _twelve$[ebp+4], eax
  00078	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000001f0000001e0000001f0000001f
  0007f	0f 11 45 e8	 movups	 XMMWORD PTR _twelve$[ebp+24], xmm0
  00083	c7 45 f8 1e 00
	00 00		 mov	 DWORD PTR _twelve$[ebp+40], 30 ; 0000001eH
  0008a	c7 45 fc 1f 00
	00 00		 mov	 DWORD PTR _twelve$[ebp+44], 31 ; 0000001fH

; 92   :     if (day > twelve[month - 1]) {

  00091	3b 5c bd cc	 cmp	 ebx, DWORD PTR _twelve$[ebp+edi*4-4]
  00095	7f 0d		 jg	 SHORT $LN10@check

; 93   :         return false;
; 94   :     }
; 95   :     if (month > 12) {

  00097	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0009a	5f		 pop	 edi

; 96   :         return false;
; 97   :     }
; 98   :     return true; 
; 99   : }

  0009b	5e		 pop	 esi
  0009c	0f 9e c0	 setle	 al
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN10@check:
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	32 c0		 xor	 al, al
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?check@@YA_NHHH@Z ENDP					; check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 130  :             return _Ok;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 131  :         }

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 114  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 115  : #if !_HAS_EXCEPTIONS
; 116  :             const bool _Zero_uncaught_exceptions = true;
; 117  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 119  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 120  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 121  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 122  : 
; 123  :             if (_Zero_uncaught_exceptions) {

  0002b	84 c0		 test	 al, al
  0002d	75 08		 jne	 SHORT $LN2@sentry

; 124  :                 this->_Myostr._Osfx();

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 84   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 85   :             if (_Rdbuf) {

  00049	85 c9		 test	 ecx, ecx
  0004b	74 05		 je	 SHORT $LN5@sentry

; 86   :                 _Rdbuf->_Unlock();

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 125  :             }
; 126  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 97   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 78   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN8@sentry

; 79   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:

; 97   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 98   :             if (!_Ostr.good()) {

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	03 ce		 add	 ecx, esi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00055	84 c0		 test	 al, al
  00057	74 28		 je	 SHORT $LN17@sentry
$LN2@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 69   :         return _Tiestr;

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 104  :             if (!_Tied || _Tied == &_Ostr) {

  00062	85 c9		 test	 ecx, ecx
  00064	74 19		 je	 SHORT $LN4@sentry
  00066	3b ce		 cmp	 ecx, esi
  00068	74 15		 je	 SHORT $LN4@sentry

; 106  :                 return;
; 107  :             }
; 108  : 
; 109  :             _Tied->flush();

  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 110  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00075	03 ce		 add	 ecx, esi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0007d	eb 02		 jmp	 SHORT $LN17@sentry
$LN4@sentry:

; 105  :                 _Ok = true;

  0007f	b0 01		 mov	 al, 1
$LN17@sentry:

; 111  :         }

  00081	88 47 04	 mov	 BYTE PTR [edi+4], al
  00084	8b c7		 mov	 eax, edi
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 474  :         return static_cast<int_type>(EOF);

  00000	83 c8 ff	 or	 eax, -1

; 475  :     }

  00003	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 465  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 466  :         return _Left == _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 467  :     }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT
; __First$ = ecx

; 388  :         // find length of null-terminated string
; 389  : #if _HAS_CXX17
; 390  : #ifdef __cpp_char8_t
; 391  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 392  : #if _HAS_U8_INTRINSICS
; 393  :             return __builtin_u8strlen(_First);
; 394  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 395  :             return _Primary_char_traits::length(_First);
; 396  : #endif // _HAS_U8_INTRINSICS
; 397  :         } else
; 398  : #endif // __cpp_char8_t
; 399  :         {
; 400  :             return __builtin_strlen(_First);
; 401  :         }
; 402  : #else // _HAS_CXX17
; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00000	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL3@length:
  00003	8a 01		 mov	 al, BYTE PTR [ecx]
  00005	41		 inc	 ecx
  00006	84 c0		 test	 al, al
  00008	75 f9		 jne	 SHORT $LL3@length
  0000a	2b ca		 sub	 ecx, edx
  0000c	8b c1		 mov	 eax, ecx

; 404  : #endif // _HAS_CXX17
; 405  :     }

  0000e	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 84   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 85   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 86   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 87   :             }
; 88   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 78   :             if (_Rdbuf) {

  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN7@Sentry_bas

; 79   :                 _Rdbuf->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN7@Sentry_bas:

; 80   :             }
; 81   :         }

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
__Pad$ = -48						; size = 8
__Val$1$ = -40						; size = 4
$T12 = -40						; size = 1
$T6 = -36						; size = 1
__Ostr$ = -32						; size = 4
__Count$2$ = -28					; size = 4
__State$ = -24						; size = 4
__State$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 767  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 55 d8	 mov	 DWORD PTR __Val$1$[ebp], edx
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 5d e0	 mov	 DWORD PTR __Ostr$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00033	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 772  :     ios_base::iostate _State = ios_base::goodbit;

  00035	33 c0		 xor	 eax, eax
  00037	89 45 ec	 mov	 DWORD PTR __State$1$[ebp], eax
  0003a	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL95@operator:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL95@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 774  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00047	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00049	2b ce		 sub	 ecx, esi
  0004b	89 4d e4	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 774  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase

; 290  :         return _Wide;

  00051	8b 7c 18 24	 mov	 edi, DWORD PTR [eax+ebx+36]
  00055	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 774  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00059	85 ff		 test	 edi, edi
  0005b	7c 17		 jl	 SHORT $LN17@operator
  0005d	7f 0e		 jg	 SHORT $LN97@operator
  0005f	85 f6		 test	 esi, esi
  00061	74 11		 je	 SHORT $LN17@operator
  00063	85 ff		 test	 edi, edi
  00065	7c 0d		 jl	 SHORT $LN17@operator
  00067	7f 04		 jg	 SHORT $LN97@operator
  00069	3b f1		 cmp	 esi, ecx
  0006b	76 07		 jbe	 SHORT $LN17@operator
$LN97@operator:
  0006d	2b f1		 sub	 esi, ecx
  0006f	83 df 00	 sbb	 edi, 0
  00072	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	66 0f 13 45 d0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  0007c	8b 7d d4	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  0007f	8b 75 d0	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  00082	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00086	89 5d d0	 mov	 DWORD PTR __Ok$[ebp], ebx

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();
; 78   :             if (_Rdbuf) {

  00089	85 c9		 test	 ecx, ecx
  0008b	74 05		 je	 SHORT $LN69@operator

; 79   :                 _Rdbuf->_Lock();

  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	ff 50 04	 call	 DWORD PTR [eax+4]
$LN69@operator:

; 97   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 98   :             if (!_Ostr.good()) {

  00099	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009e	03 cb		 add	 ecx, ebx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000a6	84 c0		 test	 al, al
  000a8	74 28		 je	 SHORT $LN109@operator
$LN63@operator:

; 99   :                 _Ok = false;
; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             const auto _Tied = _Ostr.tie();

  000aa	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 69   :         return _Tiestr;

  000af	8b 4c 18 3c	 mov	 ecx, DWORD PTR [eax+ebx+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 104  :             if (!_Tied || _Tied == &_Ostr) {

  000b3	85 c9		 test	 ecx, ecx
  000b5	74 19		 je	 SHORT $LN65@operator
  000b7	3b cb		 cmp	 ecx, ebx
  000b9	74 15		 je	 SHORT $LN65@operator

; 106  :                 return;
; 107  :             }
; 108  : 
; 109  :             _Tied->flush();

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 110  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	03 cb		 add	 ecx, ebx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000ce	eb 02		 jmp	 SHORT $LN109@operator
$LN65@operator:

; 105  :                 _Ok = true;

  000d0	b0 01		 mov	 al, 1
$LN109@operator:

; 775  :     const typename _Myos::sentry _Ok(_Ostr);

  000d2	88 45 d4	 mov	 BYTE PTR __Ok$[ebp+4], al
  000d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 776  : 
; 777  :     if (!_Ok) {

  000dc	84 c0		 test	 al, al
  000de	75 0a		 jne	 SHORT $LN8@operator

; 778  :         _State |= ios_base::badbit;

  000e0	b9 04 00 00 00	 mov	 ecx, 4

; 779  :     } else { // state okay, insert

  000e5	e9 e4 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 780  :         _TRY_IO_BEGIN

  000ea	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 781  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000ee	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase

; 249  :         return _Fmtfl;

  000f3	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 781  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000f7	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000fc	83 f8 40	 cmp	 eax, 64			; 00000040H
  000ff	74 35		 je	 SHORT $LN92@operator
$LL4@operator:

; 782  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00101	85 ff		 test	 edi, edi
  00103	7c 31		 jl	 SHORT $LN92@operator
  00105	7f 04		 jg	 SHORT $LN98@operator
  00107	85 f6		 test	 esi, esi
  00109	74 2b		 je	 SHORT $LN92@operator
$LN98@operator:

; 783  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0010b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 100  :         return _Fillch;

  00110	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 783  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00114	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 100  :         return _Fillch;

  00118	88 45 dc	 mov	 BYTE PTR $T6[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 783  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0011b	ff 75 dc	 push	 DWORD PTR $T6[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00124	83 f8 ff	 cmp	 eax, -1
  00127	75 05		 jne	 SHORT $LN2@operator

; 784  :                     _State |= ios_base::badbit; // insertion failed, quit

  00129	8d 48 05	 lea	 ecx, DWORD PTR [eax+5]

; 785  :                     break;

  0012c	eb 2d		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 782  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0012e	83 c6 ff	 add	 esi, -1
  00131	83 d7 ff	 adc	 edi, -1
  00134	eb cb		 jmp	 SHORT $LL4@operator
$LN92@operator:

; 790  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00136	8b 03		 mov	 eax, DWORD PTR [ebx]
  00138	6a 00		 push	 0
  0013a	ff 75 e4	 push	 DWORD PTR __Count$2$[ebp]
  0013d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00140	ff 75 d8	 push	 DWORD PTR __Val$1$[ebp]
  00143	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0014d	3b 45 e4	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00150	75 04		 jne	 SHORT $LN99@operator
  00152	85 d2		 test	 edx, edx
  00154	74 1c		 je	 SHORT $LN104@operator
$LN99@operator:

; 791  :             _State |= ios_base::badbit;

  00156	33 c9		 xor	 ecx, ecx
$LN110@operator:

; 797  :                     _State |= ios_base::badbit; // insertion failed, quit
; 798  :                     break;
; 799  :                 }
; 800  :             }
; 801  :         }
; 802  : 
; 803  :         _Ostr.width(0);

  00158	83 c9 04	 or	 ecx, 4
$LN6@operator:
  0015b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0015d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase

; 296  :         _Wide                      = _Newwidth;

  00160	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  00168	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
  00170	eb 55		 jmp	 SHORT $LN111@operator
$LN104@operator:

; 790  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00172	33 c9		 xor	 ecx, ecx
$LL101@operator:

; 792  :         }
; 793  : 
; 794  :         if (_State == ios_base::goodbit) {
; 795  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00174	85 ff		 test	 edi, edi
  00176	7c e3		 jl	 SHORT $LN6@operator
  00178	7f 04		 jg	 SHORT $LN100@operator
  0017a	85 f6		 test	 esi, esi
  0017c	74 dd		 je	 SHORT $LN6@operator
$LN100@operator:

; 796  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00180	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 100  :         return _Fillch;

  00183	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 796  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00187	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 100  :         return _Fillch;

  0018b	88 45 d8	 mov	 BYTE PTR $T12[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 796  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0018e	ff 75 d8	 push	 DWORD PTR $T12[ebp]
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00197	8b 4d ec	 mov	 ecx, DWORD PTR __State$1$[ebp]
  0019a	83 f8 ff	 cmp	 eax, -1
  0019d	74 b9		 je	 SHORT $LN110@operator

; 792  :         }
; 793  : 
; 794  :         if (_State == ios_base::goodbit) {
; 795  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0019f	83 c6 ff	 add	 esi, -1
  001a2	83 d7 ff	 adc	 edi, -1
  001a5	eb cd		 jmp	 SHORT $LL101@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 804  :         _CATCH_IO_(ios_base, _Ostr)

  001a7	8b 55 e0	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001aa	6a 01		 push	 1
  001ac	6a 04		 push	 4
  001ae	8b 02		 mov	 eax, DWORD PTR [edx]
  001b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b3	03 ca		 add	 ecx, edx
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  001bb	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001c0	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xiosbase
  001c1	8b 5d e0	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001c4	8b 4d e8	 mov	 ecx, DWORD PTR __State$[ebp]
$LN111@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 805  :     }
; 806  : 
; 807  :     _Ostr.setstate(_State);

  001c7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
  001ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  001d0	6a 00		 push	 0
  001d2	51		 push	 ecx
  001d3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d6	03 cb		 add	 ecx, ebx
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 118  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 119  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 120  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 121  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 122  : 
; 123  :             if (_Zero_uncaught_exceptions) {

  001e4	8b 75 d0	 mov	 esi, DWORD PTR __Ok$[ebp]
  001e7	84 c0		 test	 al, al
  001e9	75 08		 jne	 SHORT $LN25@operator

; 124  :                 this->_Myostr._Osfx();

  001eb	8b ce		 mov	 ecx, esi
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN25@operator:

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  001f3	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ios

; 79   :         return _Mystrbuf;

  001fa	8b 06		 mov	 eax, DWORD PTR [esi]
  001fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ff	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 85   :             if (_Rdbuf) {

  00203	85 c9		 test	 ecx, ecx
  00205	74 05		 je	 SHORT $LN102@operator

; 86   :                 _Rdbuf->_Unlock();

  00207	8b 01		 mov	 eax, DWORD PTR [ecx]
  00209	ff 50 08	 call	 DWORD PTR [eax+8]
$LN102@operator:

; 808  :     return _Ostr;
; 809  : }

  0020c	8b c3		 mov	 eax, ebx
  0020e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00211	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00218	59		 pop	 ecx
  00219	5f		 pop	 edi
  0021a	5e		 pop	 esi
  0021b	5b		 pop	 ebx
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$13:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1011 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1012 :     _Ostr.put(_Ostr.widen('\n'));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	6a 0a		 push	 10			; 0000000aH
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c8	 movzx	 ecx, al
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 1013 :     _Ostr.flush();

  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 1014 :     return _Ostr;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 1015 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
END
